#!/usr/bin/env bash
#
# touchpadctl
#
# Enable or disable your touchpad with a simple commandline.
#
# Copyright (c) 2019 Danny Colin <contact@dannycolin.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

device_name="$(xinput list --name-only | grep -i touchpad)"
device_id="$(xinput list --id-only "${device_name}")"
device_state="$(xinput list-props "${device_name}" | grep "Device Enabled" | grep -o "[01]$")"

touchpadctl::usage() {
    echo "usage: touchpadctl [-h] [disable|enable|toggle]"
    echo "  disable     disable your touchpad"
    echo "  enable      enable your touchpad"
    echo "  toggle      toggle touchpad state"
    echo "  -h, --help  display help"
    exit 1
}

touchpadctl::disable() {
  xinput --disable "$device_id"
}

touchpadctl::enable() {
  xinput --enable "$device_id"
}
touchpadctl::toggle() {
  if [[ "$device_state" == 1 ]];then
    xinput --disable "$device_id"
  else
    xinput --enable "$device_id"
  fi
}

touchpadctl::main() {
  case "$1" in
    disable)
      touchpadctl::disable
      ;;
    enable)
      touchpadctl::enable
      ;;
    toggle)
      touchpadctl::toggle
      ;;
    -h|--help)
      touchpadctl::usage
      ;;
    *)
      if [[ -z "$1" ]]; then
        touchpadctl::usage
      else
        printf "touchpadctl: error parsing option %s (option not found)\n" "$1"
      fi
      ;;
  esac
}

touchpadctl::main "$@"
